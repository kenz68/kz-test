// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	models "testify-examples/models"

	mock "github.com/stretchr/testify/mock"
)

// IPaymentRepository is an autogenerated mock type for the IPaymentRepository type
type IPaymentRepository struct {
	mock.Mock
}

// CreatePayment provides a mock function with given fields: payment
func (_m *IPaymentRepository) CreatePayment(payment models.Payment) (int64, error) {
	ret := _m.Called(payment)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Payment) (int64, error)); ok {
		return rf(payment)
	}
	if rf, ok := ret.Get(0).(func(models.Payment) int64); ok {
		r0 = rf(payment)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(models.Payment) error); ok {
		r1 = rf(payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePayment provides a mock function with given fields: id
func (_m *IPaymentRepository) DeletePayment(id string) (int64, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePayment")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectPaymentWIthId provides a mock function with given fields: id
func (_m *IPaymentRepository) SelectPaymentWIthId(id string) (models.Payment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SelectPaymentWIthId")
	}

	var r0 models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Payment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Payment); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Payment)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePayment provides a mock function with given fields: id, payment
func (_m *IPaymentRepository) UpdatePayment(id string, payment models.Payment) (models.Payment, error) {
	ret := _m.Called(id, payment)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePayment")
	}

	var r0 models.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, models.Payment) (models.Payment, error)); ok {
		return rf(id, payment)
	}
	if rf, ok := ret.Get(0).(func(string, models.Payment) models.Payment); ok {
		r0 = rf(id, payment)
	} else {
		r0 = ret.Get(0).(models.Payment)
	}

	if rf, ok := ret.Get(1).(func(string, models.Payment) error); ok {
		r1 = rf(id, payment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIPaymentRepository creates a new instance of IPaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPaymentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPaymentRepository {
	mock := &IPaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
